Git Tutorial
############

Cheatsheet link!:: 
    
    PDF: https://training.github.com/downloads/github-git-cheat-sheet.pdf
    Visual: https://ndpsoftware.com/git-cheatsheet.html

First Installation
------------------

Download the appropriate version of git for your system. See https://git-scm.com/downloads for operating-system specifics.

With git installed locally, open up a terminal (or a git bash shell if using Windows). Type::

    git help git 

This will open up the Github manual in a browser window (handy for referencing) and also confirm successful installation. Git is intrinsically a version control tool, with
it's own Command Line Interface (CLI). Github is a an organisation that hosts remote repositories on their own servers that users can access. Therefore you can use 
git without using github, but can't use github (for version control) without using git!

Alternatives to Github do exist, for instance Gitlab (https://about.gitlab.com/) which has some excellent features, and allows users to host their own private 
repository servers.

With your terminal open, run the following commands to let git know who you are: ::

    git config --global user.name "[name]"
    git config --global user.email "[email address]"

replacing [name] and [email address] with your own details, but keeping the speech marks.

Now, see the sections below to find out how to do what you need to do!

I Want To....
--------------

Find the section below relating to what you want to achieve with git.

Create a local repo for my code
===============================

Navigate to your source code root directory and run::

    git init 

To initialise a new repo. This is a hidden folder, and may not appear in file explorer or equivalent. It is common to also initialise a project with a 
README.md file, and a .gitignore file. These can be created from the terminal with: ::

    touch README.md 
    touch .gitignore

making sure to include the full stop before gitignore. For Windows users, create these files manually or using Windows-specific commands.

To add everything to your local repo, regardless of project stage, complete the following steps:

Run::

    git add .

This wil add everything to the git staging area. We can see more details about what has been staged and not by running::

    git status

Next, run::

    git commit -m "commit message"

This will commit everything in the staging area to the local repo. Note that this has nothing to do with Github, so far this is entirely on your local machine!
The -m flag appends a commit message to the command. You can include a short, custom message explaining what changes you have made here, within the speech marks. If you ran 
this command without that flag, git would open a VIM window, where you are expected to type out and enter a message.

Store Code on Github 
====================

Firstly, make sure you have a Github account. You do this simply from https://github.com/.

The first thing to do is create a new Github repo to store your code, or copy your local repo to. Do this from the green 'new' button on the left-hand side toolbar and follow
the instructions to name it. This will create a unique URL to your project.

It is common when creating a new repo in Github to take up their offer of creating a README, .gitignore, adding a license, etc. straight from the browser. This is
absolutely fine to do! It will however cause a very common beginner problem in Github, which is that you can't directly merge your local work into the main branch 
in your Github repo, as they'll have what's called 'unrelated histories'. We can easily resolve this though, by merging the branches locally, and then pushing.

First, from your terminal, give git the address of your remote repository: ::

    git remote add origin https://github.com/<username>/<project>

replacing <username> and <project> with your specific details. If you have not previously authenticated your device to use Github, do that by following the instructions at 
https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token. The easiest way to do this is to just verify with a browser,
using https://cli.github.com/manual/gh_auth_login.

Now, pull down the repo you just created: ::

    git pull 

This will likely be the branch 'main', with your local branch being called 'master'. We know exactly what's in each of these, and that we're happy to merge.
The only thing to be aware of is if you have multiple copies of a README or .gitignore, so make sure there are no conflicts here. Once satisfied, run: ::

    git checkout main 
    git merge master --allow-unrelated-histories

This will open a vim window to add a comment. To leave as default and exit vim, type::

    wq

and hit enter. The steps above first switch the current branch to 'main', and then merge 'master' into 'main'. See the refdocs for more information about 
the syntax and flags of this command.

Finally, go ahead and push the local 'main' branch to Github, and update the remoter 'main' branch, with: ::

    git push

Merge My Working Branch with the Main Branch 
============================================

"Ah sorry I can't show you my software right now, it was working this morning but then I tried to add a new feature and broke it".

This happened because you were editing the ground truth version of your code! If, however, you had a development branch to make changes with, and a separate
ground truth branch that you only stored working, show-offable code in, then you could avoid this problem.

Create a new branch locally, with ::

    git branch [branch-name]

For the purposes of this tutorial, we'll call the new branch 'dev'. If you then make some changes to dev, and want to commit, you can do so with the following: ::

    git add . && git commit -m "changes to dev"
    git push --set-upstream origin dev

Whew, few things to note here. The first line is simply combining the add, commit, and message functions into a single line. There are more efficient ways to write this,
but I like it in tutorials for verbosity. In the second line, note the '--set-upstream' flag. All this is doing is telling our new dev branch where to pull new versions from,
i.e which is our main working repo - in this case, our remote repo named 'origin'.

Now on Github in our browser, we can submit a 'pull request'. This is a request to the project owner(s) to combine one branch with another. In this case, we want to 
combine the dev branch with the main branch. Since 2 codebases are colliding here, we are vulnerable to a plethora of errors and breakages. Github will compare the 
codebases for us, and confirm that they can be merged safely, or tell us we need to make changes. If we are safe to merge, go ahead and approve the pull request 
(as you are the owner of your own project). In collaborative work, you'd have to wait here for approval.



